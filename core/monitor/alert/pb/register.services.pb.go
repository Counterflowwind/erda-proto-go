// Code generated by protoc-gen-go-register. DO NOT EDIT.
// Sources: alert.proto

package pb

import (
	transport "github.com/erda-project/erda-infra/pkg/transport"
	reflect "reflect"
)

// RegisterMonitorServiceImp alert.proto
func RegisterMonitorServiceImp(regester transport.Register, srv MonitorServiceServer, opts ...transport.ServiceOption) {
	_ops := transport.DefaultServiceOptions()
	for _, op := range opts {
		op(_ops)
	}
	RegisterMonitorServiceHandler(regester, MonitorServiceHandler(srv), _ops.HTTP...)
	RegisterMonitorServiceServer(regester, srv, _ops.GRPC...)
}

// ServiceNames return all service names
func ServiceNames(svr ...string) []string {
	return append(svr,
		"erda.core.monitor.alert.MonitorService",
	)
}

var (
	monitorServiceClientType  = reflect.TypeOf((*MonitorServiceClient)(nil)).Elem()
	monitorServiceServerType  = reflect.TypeOf((*MonitorServiceServer)(nil)).Elem()
	monitorServiceHandlerType = reflect.TypeOf((*MonitorServiceHandler)(nil)).Elem()
)

// MonitorServiceClientType .
func MonitorServiceClientType() reflect.Type { return monitorServiceClientType }

// MonitorServiceServerType .
func MonitorServiceServerType() reflect.Type { return monitorServiceServerType }

// MonitorServiceHandlerType .
func MonitorServiceHandlerType() reflect.Type { return monitorServiceHandlerType }

func Types() []reflect.Type {
	return []reflect.Type{
		// client types
		monitorServiceClientType,
		// server types
		monitorServiceServerType,
		// handler types
		monitorServiceHandlerType,
	}
}
